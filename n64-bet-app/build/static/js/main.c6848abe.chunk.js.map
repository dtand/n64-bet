{"version":3,"sources":["CharacterAvi.js","PlayerBet.js","N64Bet.js","App.js","serviceWorker.js","index.js","Utils.js","img/captain-falcon.png","img/donkey-kong.png","img/fox.png","img/jigglypuff.png","img/kirby.png","img/link.png","img/luigi.png","img/mario.png","img/ness.png","img/pikachu.png","img/samus.png","img/yoshi.png"],"names":["AVIS","require","CharacterAvi","className","this","props","selected","src","character","toLowerCase","React","Component","numberWithCommas","toPercentString","PlayerBetPanel","player","Row","Col","userBet","doAnimation","style","position","top","left","bettingLocked","Button","onClick","betOnPlayer","backgroundColor","size","Container","totalBet","odds","payoutFactor","apiPrefix","window","location","href","indexOf","socket","openSocket","on","data","console","log","emit","N64Bet","state","loading","loadingBetSection","username","balance","games","gameData","userBets","userTotal","playerSums","currentGameId","hasSubmitted","newBets","betKeys","parseUsername","search","URLSearchParams","get","loadHistoricalGames","fetch","then","res","json","setState","length","loadCurrentGameInfo","catch","loadPlayerBalance","id","resetBets","undefined","bets","i","submitBets","self","push","bet","requestOptions","method","headers","body","JSON","stringify","game_id","response","NotificationManager","success","updateTotalBet","total_pot","ub","ps","Number","winner","timer","sm","height","width","chat","channel","PlayerBet","key","App","useState","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","exports","x","values","toFixed","toString","split","replace","module"],"mappings":"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","file":"static/js/main.c6848abe.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst AVIS = {\n    \"captain falcon\": require('./img/captain-falcon.png'),\n    \"donkey kong\": require('./img/donkey-kong.png'),\n    \"fox\": require('./img/fox.png'),\n    \"jigglypuff\": require('./img/jigglypuff.png'),\n    \"kirby\": require('./img/kirby.png'),\n    \"link\": require('./img/link.png'),\n    \"luigi\": require('./img/luigi.png'),\n    \"mario\": require('./img/mario.png'),\n    \"ness\": require('./img/ness.png'),\n    \"pikachu\": require('./img/pikachu.png'),\n    \"samus\": require('./img/samus.png'),\n    \"yoshi\": require('./img/yoshi.png'),\n}\n\nclass CharacterAvi extends React.Component{\n    render(){\n        return(\n            <>\n                <img className= { this.props.selected ? 'character-img-selected' : 'character-img' } \n                     src={AVIS[this.props.character.toLowerCase()]}/>\n            </>\n        )\n    }\n}\n\nexport default CharacterAvi;","import React, { useState } from 'react';\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport CharacterAvi from \"./CharacterAvi\";\nimport AnimateOnChange from 'react-animate-on-change';\n\nlet numberWithCommas = require('./Utils.js').numberWithCommas;\nlet toPercentString  = require('./Utils.js').toPercentString;\n\nclass PlayerBetPanel extends React.Component{\n    render() { return ( \n        <div className={ this.props.player == 1 ? \"\" : \"bet-player\" }>           \n            <Row>\n                <Col className=\"text-center\">\n                    <br/>\n                    <CharacterAvi   selected={ this.props.userBet > 0 }\n                                    character={this.props.character}/>\n                    <br/>\n                    { this.props.doAnimation != false && <>\n                        <div style={{\n                            position: \"absolute\",\n                            top: \"1%\",\n                            left: \"12%\"\n                        }}>\n                            <h2 className=\"text-center fade-animation text-success fade-out\">\n                                    <b>+{numberWithCommas(this.props.doAnimation)}</b>\n                            </h2>\n                        </div>\n                    </> \n                    }\n                    <br/>\n                    { !this.props.bettingLocked && <>\n                            <Button onClick={ () => this.props.betOnPlayer(this.props.player, 1) } \n                                    style={{backgroundColor: '#9147ff'}} \n                                    size=\"md\"> + </Button> \n                            <Button onClick={ () => this.props.betOnPlayer(this.props.player, -1) } \n                                    style={{backgroundColor: '#9147ff'}} \n                                    size=\"md\"> - </Button> \n                        </>\n                    }\n                </Col>\n                <Col className=\"text-center\">\n                    <Container>\n                        <br/>\n                        <h4>\n                            Player {this.props.player} | {this.props.character}\n                        </h4>\n                        <br/>\n                        <h4>\n                            ${numberWithCommas(this.props.userBet)} \n                         </h4>\n                         <br/>\n                    </Container>\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n            <Col className=\"text-center\">\n                <Container  className=\"bet-player-bottom\">\n                    <Row>\n                        <Col>\n                            <h5>\n                                <Row>\n                                    <Col>\n                                        Pool\n                                    </Col>   \n                                    <Col>\n                                        <span>${numberWithCommas(this.props.totalBet)}</span>\n                                    </Col>\n                                </Row>\n                            </h5>\n                            <h5>\n                                <Row>\n                                    <Col>\n                                        Odds\n                                    </Col>   \n                                    <Col>\n                                        <span>{toPercentString(this.props.odds)}</span>\n                                    </Col>\n                                </Row>\n                            </h5>\n                            <h5>\n                                <Row>\n                                    <Col className={ this.props.userBet > 0 ? \"text-success\": \"text-white\" }>\n                                        <b>Payout</b>\n                                    </Col>\n                                    <Col>\n                                        <b className={ this.props.userBet > 0 ? \"text-success\": \"text-white\" }>\n                                            ${ numberWithCommas(this.props.payoutFactor * this.props.userBet) }\n                                        </b>\n                                    </Col>\n                                </Row>\n                            </h5>\n                        </Col>\n                    </Row>\n                    </Container>\n                </Col>\n\n            </Row>\n        </div>  \n    )} \n}\n\nexport default PlayerBetPanel;","import React, { useState } from 'react';\nimport './App.css';\nimport ReactTwitchEmbedVideo from \"react-twitch-embed-video\";\nimport { Row, Col, Container, Button } from 'reactstrap';\nimport './index.css';\nimport PlayerBetPanel from './PlayerBet.js';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\nimport openSocket from \"socket.io-client\";\n\nlet apiPrefix = \"https://n64-bet.herokuapp.com/\";\n\nif (window.location.href.indexOf(\"localhost\") > -1) {\n     apiPrefix = \"http://localhost:8080/\";\n}\n\nlet numberWithCommas = require('./Utils.js').numberWithCommas;\n\nvar socket = openSocket(apiPrefix);\n\nsocket.on('connect', function(data) {\n   console.log(\"connected\");\n   socket.emit('join', 'Hello World from client');\n});\n\nsocket.on('disconnect', function(data) {\n    console.log(\"disconnected\");\n    socket = openSocket(apiPrefix);\n });\n \n\nclass N64Bet extends React.Component{\n\n    state = {\n        loading: true,\n        loadingBetSection: false,\n        username: \"\",\n        balance: 0,\n        games: [],\n        gameData: {},\n        userBets: [0,0,0,0],\n        userTotal: 0,\n        playerSums: [],\n        currentGameId: -1,\n        bettingLocked: false,\n        hasSubmitted: false,\n        newBets: [false,false,false,false],\n        betKeys: [0,0,0,0]\n    }\n\n    parseUsername = () => {\n        let search   = window.location.search;\n        let params   = new URLSearchParams(search);\n        return params.get('username');\n    }\n\n    loadHistoricalGames = () => {\n        fetch(apiPrefix + 'v1/games')\n        .then(res => res.json())\n        .then((data) => {\n            this.setState({\n                games: data,\n                currentGameId: data[data.length - 1]['id']\n            });\n            this.loadCurrentGameInfo(data[data.length - 1]['id']);\n        })\n        .catch(console.log)\n    }\n\n    loadPlayerBalance = () => {\n        let username = \"\"\n        if (this.state.username == \"\"){\n            username = this.parseUsername();\n        }\n        else{\n            username = this.state.username;\n        }\n        fetch(apiPrefix + 'v1/balance?username=' + username)\n        .then(res => res.json())\n        .then((data) => {\n            console.log(data);\n            this.setState({\n                balance: data.balance\n            })\n        })\n        .catch(console.log)\n    }\n\n    loadCurrentGameInfo = (id, resetBets) => {\n        console.log(\"grabbing game info: \" + id);\n        if(id == undefined){\n            id = this.state.currentGameId;\n            console.log(\"grabbing game info: \" + id);\n            if(id == undefined || id < 0)\n                return;\n        }\n        fetch(apiPrefix + 'v1/game?id=' + id)\n        .then(res => res.json())\n        .then((data) => {\n            console.log(data);\n            let userBets  = [0,0,0,0]\n            let userTotal = 0\n            const bets = data['bets'];\n            for(let i = 0; i < bets.length; i++){\n                if(bets[i]['username'] == this.state.username){\n                    userTotal += bets[i]['total_bet'];\n                    userBets[bets[i]['player_id']-1] = bets[i]['total_bet'];\n                }\n            }\n            \n            this.setState({\n                gameData: data,\n                playerSums: data['player_sums'],\n                loading: false,\n                userTotal: userTotal,\n                userBets: userBets,\n                bettingLocked: (userTotal > 0 || this.state.hasSubmitted),\n                loadingBetSection: false,\n                currentGameId: data['id'] \n            });\n        })\n        .catch(console.log)\n    }\n\n    submitBets = () => {\n        let bets = []\n        const self = this;\n\n        for(let i = 0; i < this.state.userBets.length; i++){\n            if(this.state.userBets[i] > 0){\n                bets.push({\n                    bet: this.state.userBets[i],\n                    player: i+1\n                });\n            }\n        }\n        let requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                game_id: this.state.currentGameId,\n                username: this.state.username,\n                bets: bets\n             })\n        };\n        \n        fetch(apiPrefix + 'v1/bets', requestOptions)\n            .then(response => response.json())\n            .then((data) => {\n                if(data[\"success\"]){\n                    self.loadCurrentGameInfo();\n                }\n                else{\n                    console.log(data[\"message\"])\n                }\n            });\n\n        NotificationManager.success('Your bets have been locked with a total wager of: ' + this.state.userTotal, 'Bets locked');\n        \n        this.setState({\n            hasSubmitted: true,\n            bettingLocked: true\n        });\n    }\n\n    updateTotalBet = (bet) => {\n        let gameData = this.state.gameData;\n        gameData.total_pot += bet;\n        this.setState({\n            userTotal: this.state.userTotal + bet,\n            gameData: gameData\n        });\n    }\n\n    betOnPlayer = (player, bet) => {\n        if(bet < 0 && this.state.userBets[player-1] == 0){\n            return;\n        }\n        let gameData = this.state.gameData;\n        gameData.total_pot += bet;\n        let ub = this.state.userBets;\n        let ps = this.state.playerSums;\n        ub[player-1] = ub[player-1] + bet;\n        ps[player-1] = ps[player-1] + bet;\n        this.setState({\n            userTotal: this.state.userTotal + bet,\n            userBets: ub,\n            playerSums: ps,\n            gameData: gameData\n        });\n    }\n\n    componentDidMount() {\n        this.loadHistoricalGames();\n        this.loadPlayerBalance();\n        this.setState({\n            username: this.parseUsername()\n        });\n\n        const self = this;\n\n        socket.on('new_bets', function(data) {\n            console.log(data);\n            if(data.username == self.state.username)\n                return;\n            let playerSums  = self.state.playerSums;\n            let newBets     = self.state.newBets;\n            let gameData    = self.state.gameData;\n            let betKeys     = self.state.betKeys;\n            console.log(gameData);\n            for(let i = 0; i < data.bets.length; i++){\n                playerSums[data.bets[i].player-1] += Number(data.bets[i].bet);\n                if(data.bets[i] != 0){\n                    newBets[data.bets[i].player-1] = Number(data.bets[i].bet);\n                    betKeys[data.bets[i].player-1]++;\n                }\n                else\n                    newBets[data.bets[i].player-1] = false;\n                gameData.total_pot += Number(data.bets[i].bet);\n            }\n            console.log(gameData);\n            self.setState({\n                playerSums: playerSums,\n                newBets: newBets,\n                gameData: gameData,\n                betKeys: betKeys\n            });\n        });\n\n        socket.on('game_resolved', function(data) {\n            console.log(\"game resolved..\");\n            NotificationManager.success('The game has completed and the winner is: player ' + data.winner, 'Game Completed');\n            self.loadPlayerBalance();\n            self.loadCurrentGameInfo();\n        });\n\n        socket.on('new_game', function(data) {\n            console.log(\"new game..\");\n            NotificationManager.success('A new game lobby has started!', 'New Game');\n            self.loadCurrentGameInfo(self.state.currentGameId + 1, true);\n        });\n    }\n\n    componentWillUnmount() {\n        this.timer = null;\n    }\n\n    render(){ return (\n        <div className=\"App bg-all\">\n            <Row className=\"nav text-white\">\n                <Col sm=\"1\"/>\n                <Col className=\"text-left\">\n                    <h3>N64 BET | Smash Bros</h3>\n                </Col>\n                <Col className=\"text-right\">\n                    <h3>\n                        <span className=\"primary-color\">{ this.state.username }</span> | Balance: \n                        ${ numberWithCommas(this.state.balance) }\n                    </h3>\n                </Col>\n                <Col sm=\"1\"/>\n            </Row>\n            { this.state.loading && \n                <div>\n                    <h1 style={{\n                        \"position\": \"absolute\",\n                        \"top\": \"50%\",\n                        \"left\": \"50%\"\n                    }}>\n                        <div className=\"animate-flicker\">Loading...</div>\n                    </h1>\n                </div> \n            }\n        { !this.state.loading && <>\n            <section className=\"video-section\">\n                <br/>\n                <ReactTwitchEmbedVideo height=\"512px\" width=\"100%\" chat=\"false\" channel=\"dtravas\" />\n                { !this.state.bettingLocked &&\n                    <div className=\"text-left pad-left-20\">\n                        <Button onClick={ this.submitBets } \n                                style={{backgroundColor: '#9147ff'}} \n                                size=\"sm\"> \n                            PLACE BETS\n                        </Button>\n                    </div>\n                }{ this.state.bettingLocked && \n                    <h5 className=\"text-white\">\n                        YOUR BETS ARE SUBMITTED\n                    </h5>\n                }\n                <Row className=\"game-info-banner\">\n                    <Col className=\"text-left\">\n                        <div className=\"pad-left-20\">\n                            POT SIZE ${numberWithCommas(this.state.gameData['total_pot'])} | \n                            YOUR BETS ${numberWithCommas(this.state.userTotal)} \n                        </div>\n                    </Col>\n                    <Col className=\"text-right\">\n                        <div className=\"pad-right-20\">\n                            GAME: {this.state.currentGameId} | MIN BET {1} | MAX BET {100} | BETTING IS {\n                                this.state.gameData[\"betting_open\"] && \n                                    <span className=\"text-success\">\n                                        <b>OPEN</b>\n                                    </span> \n                                }{ !this.state.gameData[\"winner\"] && !this.state.gameData[\"betting_open\"] &&                                    \n                                    <span className=\"text-danger\">\n                                        <b>CLOSED</b>\n                                    </span>\n                                }{ this.state.gameData[\"winner\"] &&\n                                    <span className=\"text-success\">\n                                        <b>RESOLVED - PLAYER { this.state.gameData[\"winner\"] } WON</b>\n                                    </span>\n                                }\n                        </div>   \n                    </Col>\n                </Row>\n            </section>\n            </> }\n            { !this.state.loading && <section className= { this.state.bettingLocked ? \"bet-section-locked\" : \"bet-section\" }>   \n                <Row>\n                    <Col>\n                    <Row className=\"text-black\">\n                        <Col>\n                        <PlayerBetPanel player={1} \n                                        key={ \"p1-\" + this.state.betKeys[0] }\n                                        doAnimation={ this.state.newBets[0] }\n                                        character={ this.state.gameData['metadata']['characters'][0] } \n                                        totalBet={ this.state.playerSums[0] }\n                                        userBet={ this.state.userBets[0] }\n                                        odds={ this.state.gameData['total_pot'] == 0 ? 0 : \n                                            this.state.playerSums[0] / this.state.gameData['total_pot']\n                                            }\n                                        payoutFactor={ this.state.playerSums[0] == 0 ? 0 : \n                                            this.state.gameData['total_pot'] / this.state.playerSums[0] \n                                        }\n                                        betOnPlayer={ this.betOnPlayer }\n                                        updateTotalBet={ this.updateTotalBet }\n                                        bettingLocked={ this.state.bettingLocked }/>\n                        </Col>\n                        <Col>\n                        <PlayerBetPanel player={2} \n                                        key={ \"p2-\" + this.state.betKeys[1] }\n                                        doAnimation={ this.state.newBets[1] }\n                                        character={ this.state.gameData['metadata']['characters'][1] } \n                                        totalBet={ this.state.playerSums[1] }\n                                        userBet={ this.state.userBets[1] }\n                                        odds={ this.state.gameData['total_pot'] == 0 ? 0 : \n                                            this.state.playerSums[1] / this.state.gameData['total_pot']\n                                            }\n                                        payoutFactor={ this.state.playerSums[1] == 0 ? 0 : \n                                            this.state.gameData['total_pot'] / this.state.playerSums[1] \n                                            }\n                                            betOnPlayer={ this.betOnPlayer }\n                                            updateTotalBet={ this.updateTotalBet }\n                                            bettingLocked={ this.state.bettingLocked }/>\n                        </Col>\n                        <Col>\n                        <PlayerBetPanel player={3} \n                                        key={ \"p3-\" + this.state.betKeys[2] }\n                                        doAnimation={ this.state.newBets[2] }\n                                        character={ this.state.gameData['metadata']['characters'][2] } \n                                        totalBet={ this.state.playerSums[2] }\n                                        userBet={ this.state.userBets[2] }\n                                        odds={ this.state.gameData['total_pot'] == 0 ? 0 : \n                                            this.state.playerSums[2] / this.state.gameData['total_pot']\n                                            }\n                                        payoutFactor={ this.state.playerSums[2] == 0 ? 0 : \n                                            this.state.gameData['total_pot'] / this.state.playerSums[2] \n                                        }\n                                        betOnPlayer={ this.betOnPlayer }\n                                        updateTotalBet={ this.updateTotalBet }\n                                        bettingLocked={ this.state.bettingLocked }/>\n                        </Col>\n                        <Col>\n                        <PlayerBetPanel player={4} \n                                        key={ \"p4-\" + this.state.betKeys[3] }\n                                        doAnimation={ this.state.newBets[3] }\n                                        character={ this.state.gameData['metadata']['characters'][3] } \n                                        totalBet={ this.state.playerSums[3] }\n                                        userBet={ this.state.userBets[3] }\n                                        odds={ this.state.gameData['total_pot'] == 0 ? 0 : \n                                            this.state.playerSums[3] / this.state.gameData['total_pot']\n                                            }\n                                        payoutFactor={ this.state.playerSums[3] == 0 ? 0 : \n                                            this.state.gameData['total_pot'] / this.state.playerSums[3] \n                                        }\n                                        betOnPlayer={ this.betOnPlayer }\n                                        updateTotalBet={ this.updateTotalBet }\n                                        bettingLocked={ this.state.bettingLocked }/>\n                        </Col>\n                    </Row>\n                    </Col>\n                </Row>\n                </section>\n            }{ !this.state.loading && this.state.loadingBetSection && \n                <section className=\"bet-section text-center\"> \n                    <h3>\n                        <br/>\n                        <br/>\n                        <br/>\n                        <br/>\n                        <div className=\"animate-flicker\"> Fetching new bets...</div>\n                        <br/>\n                        <br/>\n                        <br/>\n                    </h3>\n                </section>}\n            <NotificationContainer/>\n      </div>\n    )}\n}\n\nexport default N64Bet;","import React, { useState } from 'react';\nimport './App.css';\nimport './index.css';\nimport 'react-notifications/lib/notifications.css';\nimport N64Bet from './N64Bet';\n\nfunction App() {\n\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <N64Bet/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","let numberWithCommas = function(x) {\n    x = x.toFixed(2)\n    let values = x.toString().split(\".\")\n    if(values.length == 1)\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    else{\n        let lhs = values[0].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        return lhs + '.' + values[1]\n    }\n}\n\nlet toPercentString = function(x){\n    x = x * 100\n    x = x.toFixed(2)\n    return x.toString() + \"%\"\n}\n\nexports.numberWithCommas = numberWithCommas;\nexports.toPercentString  = toPercentString;","module.exports = __webpack_public_path__ + \"static/media/captain-falcon.7e03e44e.png\";","module.exports = __webpack_public_path__ + \"static/media/donkey-kong.4317ea84.png\";","module.exports = __webpack_public_path__ + \"static/media/fox.2b342be5.png\";","module.exports = __webpack_public_path__ + \"static/media/jigglypuff.a8bee105.png\";","module.exports = __webpack_public_path__ + \"static/media/kirby.98999074.png\";","module.exports = __webpack_public_path__ + \"static/media/link.967d372d.png\";","module.exports = __webpack_public_path__ + \"static/media/luigi.37dc50ca.png\";","module.exports = __webpack_public_path__ + \"static/media/mario.914bb2b4.png\";","module.exports = __webpack_public_path__ + \"static/media/ness.a2a6917e.png\";","module.exports = __webpack_public_path__ + \"static/media/pikachu.7918bdf2.png\";","module.exports = __webpack_public_path__ + \"static/media/samus.bb8c010d.png\";","module.exports = __webpack_public_path__ + \"static/media/yoshi.6e84f65e.png\";"],"sourceRoot":""}